// <auto-generated />
using System;
using AspReactTestApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspReactTestApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230714123956_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.AutoSalon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AutoSalon");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.AutoSalonLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoSalonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutoSalonId");

                    b.HasIndex("LanguageId");

                    b.ToTable("AutoSalonLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoSalonId")
                        .HasColumnType("int");

                    b.Property<bool>("BarterAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CreditAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("EngineVolume")
                        .HasColumnType("int");

                    b.Property<int>("FueltypeId")
                        .HasColumnType("int");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AutoSalonId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FueltypeId");

                    b.HasIndex("ModelId");

                    b.HasIndex("RegionId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("YearId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.CategoryLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.ColorLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ColorLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.FeatureLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FeatureLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Fueltype", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Fueltype");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.FueltypeLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FueltypeId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FueltypeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("FueltypeLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseModelId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseModelId");

                    b.HasIndex("BrandId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.RegionLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Transmission");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.TransmissionLocale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("TransmissionLocale");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarFeature", b =>
                {
                    b.Property<int>("CarsId")
                        .HasColumnType("int");

                    b.Property<int>("FeaturesId")
                        .HasColumnType("int");

                    b.HasKey("CarsId", "FeaturesId");

                    b.HasIndex("FeaturesId");

                    b.ToTable("CarFeature");
                });

            modelBuilder.Entity("TurboazFetching.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("TurboazFetching.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.AutoSalonLocale", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.AutoSalon", "AutoSalon")
                        .WithMany("AutoSalonLocales")
                        .HasForeignKey("AutoSalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("AutoSalonLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoSalon");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Car", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.AutoSalon", "AutoSalon")
                        .WithMany("Cars")
                        .HasForeignKey("AutoSalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Fueltype", "Fueltype")
                        .WithMany()
                        .HasForeignKey("FueltypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Transmission", "Transmission")
                        .WithMany()
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoSalon");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Currency");

                    b.Navigation("Fueltype");

                    b.Navigation("Model");

                    b.Navigation("Region");

                    b.Navigation("Transmission");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Category", b =>
                {
                    b.HasOne("TurboazFetching.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.CategoryLocale", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Category", "Category")
                        .WithMany("CategoryLocales")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("CategoryLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.ColorLocale", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Color", "Color")
                        .WithMany("ColorLocales")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("ColorLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.FeatureLocale", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Feature", "Feature")
                        .WithMany("FeatureLocales")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("FeatureLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.FueltypeLocale", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Fueltype", "Fueltype")
                        .WithMany("FueltypeLocales")
                        .HasForeignKey("FueltypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("FueltypeLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fueltype");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Model", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Model", "BaseModel")
                        .WithMany()
                        .HasForeignKey("BaseModelId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseModel");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.RegionLocale", b =>
                {
                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("RegionLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Region", "Region")
                        .WithMany("RegionLocales")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.TransmissionLocale", b =>
                {
                    b.HasOne("TurboazFetching.Entities.Language", "Language")
                        .WithMany("TransmissionLocales")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Transmission", "Transmission")
                        .WithMany("TransmissionLocales")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("CarFeature", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TurboazFetching.Entities.Image", b =>
                {
                    b.HasOne("AspReactTestApp.Entities.Concrete.CarRelated.Car", null)
                        .WithMany("Images")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.AutoSalon", b =>
                {
                    b.Navigation("AutoSalonLocales");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Car", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Category", b =>
                {
                    b.Navigation("CategoryLocales");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Color", b =>
                {
                    b.Navigation("ColorLocales");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Feature", b =>
                {
                    b.Navigation("FeatureLocales");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Fueltype", b =>
                {
                    b.Navigation("FueltypeLocales");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Region", b =>
                {
                    b.Navigation("RegionLocales");
                });

            modelBuilder.Entity("AspReactTestApp.Entities.Concrete.CarRelated.Transmission", b =>
                {
                    b.Navigation("TransmissionLocales");
                });

            modelBuilder.Entity("TurboazFetching.Entities.Language", b =>
                {
                    b.Navigation("AutoSalonLocales");

                    b.Navigation("CategoryLocales");

                    b.Navigation("ColorLocales");

                    b.Navigation("FeatureLocales");

                    b.Navigation("FueltypeLocales");

                    b.Navigation("RegionLocales");

                    b.Navigation("TransmissionLocales");
                });
#pragma warning restore 612, 618
        }
    }
}
